import type { InjectionKey, Ref } from 'vue';
export type FormLayoutProps = {
    className?: string;
    colon?: boolean;
    labelAlign?: 'right' | 'left' | ('right' | 'left')[];
    wrapperAlign?: 'right' | 'left' | ('right' | 'left')[];
    labelWrap?: boolean;
    labelWidth?: number;
    wrapperWidth?: number;
    wrapperWrap?: boolean;
    labelCol?: number | number[];
    wrapperCol?: number | number[];
    fullness?: boolean;
    size?: 'small' | 'default' | 'large';
    layout?: 'vertical' | 'horizontal' | 'inline' | ('vertical' | 'horizontal' | 'inline')[];
    direction?: 'rtl' | 'ltr';
    shallow?: boolean;
    feedbackLayout?: 'loose' | 'terse' | 'popover';
    tooltipLayout?: 'icon' | 'text';
    bordered?: boolean;
    breakpoints?: number[];
    inset?: boolean;
    spaceGap?: number;
    gridColumnGap?: number;
    gridRowGap?: number;
};
export declare const FormLayoutDeepContext: InjectionKey<Ref<FormLayoutProps>>;
export declare const FormLayoutShallowContext: InjectionKey<Ref<FormLayoutProps>>;
export declare const useFormDeepLayout: () => Ref<FormLayoutProps>;
export declare const useFormShallowLayout: () => Ref<FormLayoutProps>;
export declare const useFormLayout: () => Ref<FormLayoutProps>;
export declare const FormLayout: import("vue").DefineComponent<FormLayoutProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<FormLayoutProps> & Readonly<{}>, {}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
export default FormLayout;
